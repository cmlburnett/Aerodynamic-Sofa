Aerodynamic Sofa
Synchronizes the entirety of a Flickr account to the local computer for backup.

PURPOSE
The purpose and goal of Aerodynamic Sofa is to create a full copy of all
metadata locally that mirrors what is on Flickr.  I actually created this prior
to the February 2011 incident where Flickr nuked an active account (bindermichi)
accidentally and mostly for reasons that came true for Mirco.  It also makes me
feel warm and fuzzy knowing the countless hours I have tagged, entitled,
described, noted, located, cataloged (sets, etc.), etc. have a nice, pretty
backup on my own computer.

This backup should be sufficiently robust that recreating my Flickr account
would be doable, though not necessarily easy, but doable nonetheless.


SYNCHRONIZATION
There are eight things that can be synchronized from Flickr:
* Collections
* Favorites
* Galleries
* Photos
* Groups
* Sets
* Contacts
* Profile

Each of these is stored in an XML file like the following for contacts and profile:

<?xml version="1.0" encoding="utf-8"?>
<asofa>
    <contacts>
        <contact nsid="24662369@N07" realname="NASA Goddard Space Flight Center" username="NASA Goddard Photo and Video" family="0" friend="0" ignored="0" />
    </contacts>
</asofa>

<?xml version="1.0" encoding="utf-8"?>
<asofa>
    <profile nsid="11111111@N01" username="upload" realname="Bob">
        <mbox>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</mbox>
        <location>Somewhereville</location>
        <firstphoto date="XXXXXXXXXX" datestr="YYYY-MM-DD HH:MM:SS" />
        <numphotos>8234</numphotos>
        <views>18489</views>
        <preferences contenttype="1" geoperms="1" hidden="1" importgeoexif="0" privacy="4" safety="1" />
        <url_profile>http://www.flickr.com/people/upload/</url_profile>
        <url_photos>http://www.flickr.com/photos/upload/</url_photos>
        <url_mobile>http://m.flickr.com/photostream.gne?id=11111111</url_mobile>
        <tags>
            <tag val="circus" />
            <tag val="water" />
        </tags>
    </profile>
</asofa>


SETUP
The easiest way is to create a dot file with necessary information in it.  Run
`python sync.py -h` to get the juicy details on the file name and contents of
the dot file.  This script does it's work through the Flickr API and you must
have a Flickr API key to use it.

http://www.flickr.com/services/apps/create/noncommercial/

Since this project has grown from personal code for my own needs, I have not
researched how publicly-distributed applications handle this whole API key
thing.  Input on this is welcome.  Until then, create an API key and put the
access key and secret key in the config file.

The first time the script is invoked it must route you through Flickr's web site
to authorize the use of the key against your account.  This is invoked through
the flickrapi module.  Once authorized then that is cached on your computer and
will not be repeated.

The storage directory in the config file is where the XML files will be created,
read, and updated.  If it does not exist then it will be created.  Note that
the entire path is not created, just the last directory if it does not exist.


USAGE
Running with the -h flag is pretty explanatory.  If -l is supplied with
appropriate letters then only those are synchronized.  Perhaps the most used for
me is `python sync.py -l p -d YYYY-MM-DD` to sync the photos and sets that were
viewed, commented, or favorited on said date.
Alternatively, `python sync.py -l p -d 'YYYY-MM-DD|YYYY-MM-DD'` to synchronize
the date range specified.  Note that the date range is separate by a pipe | and,
in bash, must be quoted to prevent bash from thinking you wish to pipe commands
together.

If you have made changes to a particular set then you can specify the set ID and
synchronize just that set.  Be sure to add the -r flag to synchronize the
photos/videos in that set too.

If you have made changes to a particular photo/video then you can specify the
ID and synchronize just that photo/video.
